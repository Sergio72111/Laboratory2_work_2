name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-test-dev cmake g++

      - name: Install dependencies on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew update
          brew install boost cmake

      - name: Configure with CMake
        run: |
          cmake .

      - name: Build the project
        run: |
          cmake --build . --config Release

      - name: Run tests
        run: |
          ctest --output-on-failure

      - name: Create package (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          cmake --build . --target package
          ls -l ${{ runner.workspace }}/CPack/IPFilterProject-0.1.0-Linux.deb

      - name: Create Release for Linux
        if: ${{ runner.os == 'Linux' }}
        id: create_release_linux
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "linux-${{ github.run_number }}"
          release_name: "Release Linux ${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ${{ runner.workspace }}/CPack/IPFilterProject-0.1.0-Linux.deb
          asset_name: IPFilterProject-0.1.0-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Create package (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          cmake --build . --target package